buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath paths.fabricClassPath
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

// Singing configs
def STORE_FILE, KEY_ALIAS, STORE_PASSWORD, KEY_PASSWORD
// Api key configs
// def FABRIC_ENABLED, FABRIC_API_KEY, FABRIC_API_SECRET
// Apply customization or use default
File localConfig = file('local/config.properties')
// Properties fabricProperties = new Properties()
// fabricProperties.load(new FileInputStream(file('fabric.properties')))
if (localConfig.exists()) {
    Properties configProperties = new Properties()
    configProperties.load(new FileInputStream(localConfig))

    STORE_FILE = 'local/keystore.jks'
    KEY_ALIAS = configProperties['KEY_ALIAS']
    STORE_PASSWORD = configProperties['KEY_STORE_PASSWORD']
    KEY_PASSWORD = configProperties['KEY_PASSWORD']

    // FABRIC_API_KEY = configProperties['FABRIC_API_KEY']
    // FABRIC_API_SECRET = configProperties['FABRIC_SECRET_KEY']

    // Override fabric properties
    // fabricProperties.setProperty('apiKey', "$FABRIC_API_KEY")
     //fabricProperties.setProperty('apiSecret', "$FABRIC_API_SECRET")
} else {
    STORE_FILE = 'debug.keystore'
    KEY_ALIAS = 'androiddebugkey'
    STORE_PASSWORD = 'android'
    KEY_PASSWORD = 'android'

    // FABRIC_ENABLED = false;
    // FABRIC_API_KEY = fabricProperties['apiKey']
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

android {
    compileSdkVersion "$rootProject.compileSdkVersion".toInteger()
    buildToolsVersion "$rootProject.buildToolsVersion"

    defaultConfig {
        applicationId 'io.github.ryanhoo.firFlight'
        minSdkVersion "$rootProject.minSdkVersion".toInteger()
        targetSdkVersion "$rootProject.targetSdkVersion".toInteger()
        versionCode "$VERSION_CODE".toInteger()
        versionName "$VERSION_NAME"
    }

    signingConfigs {
        release {
            storeFile file("$STORE_FILE")
            keyAlias "$KEY_ALIAS"
            storePassword "$STORE_PASSWORD"
            keyPassword "$KEY_PASSWORD"
        }
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    sourceSets {
        main {
            res.srcDirs = [
                    'src/main/res-common-dialog/',
                    'src/main/res/'
            ]
        }
    }

    buildTypes {
        debug {
            versionNameSuffix '(D)'
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    productFlavors {
        develop {
            applicationId 'io.github.ryanhoo.firFlight.dev'
        }

        fir
        GooglePlay
        // WanDouJia
        // YingYongBao
    }

    productFlavors.all { flavor ->
        manifestPlaceholders.put('flightFlavorName', flavor.name)
        // Unnecessary, there already has a FLAVOR in BuildConfig
        // flavor.buildConfigField('String', 'FLAVOR_NAME', "\"${flavor.name}\"")

        // manifestPlaceholders.put('fabricApiKey', "$FABRIC_API_KEY")
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    testCompile libs.junit

    compile libs.support_v4
    compile libs.appcompat_v7
    compile libs.material_design
    compile libs.recyclerview_v7
    compile libs.cardview_v7
    compile libs.customtabs

    compile libs.rxjava
    compile libs.rxandroid

    compile libs.glide

    compile libs.butterknife

    compile libs.gson

    compile libs.retrofit2
    compile libs.retrofit2GsonConverter
    compile libs.retrofit2RxJavaAdapter

    compile libs.sqlbrite

    compile(libs.crashlytics) { transitive = true; }
    compile(libs.answers) { transitive = true; }

    compile libs.stetho
    compile libs.stetho_okhttp
    compile libs.stetho_jsconsole

    compile libs.calligraphy
}

afterEvaluate {
    initFabricPropertiesIfNeeded()
}

def initFabricPropertiesIfNeeded() {
    def propertiesFile = file('fabric.properties')
    if (!propertiesFile.exists()) {
        def commentMessage = "This is autogenerated fabric property from system environment to prevent key to be committed to source control."
        ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
            entry(key: "apiSecret", value: crashlyticsdemoApisecret)
            entry(key: "apiKey", value: crashlyticsdemoApikey)
        }
    }
}